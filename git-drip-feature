#!/bin/sh
# vim:et:ft=sh:sts=4:sw=4

require_git_repo
require_gitdrip_initialized
gitdrip_load_settings
PREFIX=$(git config --get gitdrip.prefix.feature)

usage() {
    echo "usage: git drip feature [list] [-v]"
    echo "       git drip feature start [-F] <name> [<base>]"
    echo "       git drip feature finish [-rFks] <name|nameprefix>"
    echo "       git drip feature publish <name>"
    echo "       git drip feature track <name>"
    echo "       git drip feature diff [<name|nameprefix>]"
    echo "       git drip feature rebase [-i] [<name|nameprefix>]"
    echo "       git drip feature checkout [<name|nameprefix>]"
    echo "       git drip feature pull <remote> [<name>]"
}

cmd_default() {
    cmd_list "$@"
}

cmd_help() {
    usage
    exit 0
}

require_name_arg() {
    if [ "$NAME" = "" ]; then
        msg "Missing argument <name>"
        usage
        exit 1
    fi
}

expand_nameprefix_arg() {
    require_name_arg

    local expanded_name
    local exitcode
    expanded_name=$(gitdrip_resolve_nameprefix "$NAME" "$PREFIX")
    exitcode=$?
    case $exitcode in
        0) NAME=$expanded_name
           BRANCH=$PREFIX$NAME
           ;;
        *) exit 1 ;;
    esac
}

use_current_feature_branch_name() {
    local current_branch=$(git_current_branch)
    if startswith "$current_branch" "$PREFIX"; then
        BRANCH=$current_branch
        NAME=${BRANCH#$PREFIX}
    else
        msg "The current HEAD is no feature branch."
        msg "Please specify a <name> argument."
        exit 1
    fi
}

expand_nameprefix_arg_or_current() {
    if [ "$NAME" != "" ]; then
        expand_nameprefix_arg
        require_branch "$PREFIX$NAME"
    else
        use_current_feature_branch_name
    fi
}

name_or_current() {
    if [ -z "$NAME" ]; then
        use_current_feature_branch_name
    fi
}

parse_args() {
    # parse options
    FLAGS "$@" || exit $?
    eval set -- "${FLAGS_ARGV}"

    # read arguments into global variables
    NAME=$1
    BRANCH=$PREFIX$NAME
}

parse_remote_name() {
    # parse options
    FLAGS "$@" || exit $?
    eval set -- "${FLAGS_ARGV}"

    # read arguments into global variables
    REMOTE=$1
    NAME=$2
    BRANCH=$PREFIX$NAME
}

cmd_list() {
    DEFINE_boolean verbose false 'verbose (more) output' v
    parse_args "$@"

    local feature_branches
    local current_branch
    local short_names
    feature_branches=$(echo "$(git_local_branches)" | grep "^$PREFIX")
    if [ -z "$feature_branches" ]; then
        msg "No feature branches exist."
        msg ""
        msg "You can start a new feature branch:"
        msg ""
        msg "    git drip feature start <name> [<base>]"
        msg ""
        exit 0
    fi
    current_branch=$(git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g')
    short_names=$(echo "$feature_branches" | sed "s ^$PREFIX  g")

    # determine column width first
    local width=0
    local branch
    for branch in $short_names; do
        local len=${#branch}
        width=$(max $width $len)
    done
    width=$(($width+3))

    local branch
    for branch in $short_names; do
        local fullname=$PREFIX$branch
        local base=$(git merge-base "$fullname" "$MASTER_BRANCH")
        local develop_sha=$(git rev-parse "$MASTER_BRANCH")
        local branch_sha=$(git rev-parse "$fullname")
        if [ "$fullname" = "$current_branch" ]; then
            printf "* "
        else
            printf "  "
        fi
        if flag verbose; then
            printf "%-${width}s" "$branch"
            if [ "$branch_sha" = "$develop_sha" ]; then
                printf "(no commits yet)"
            elif [ "$base" = "$branch_sha" ]; then
                printf "(is behind develop, may ff)"
            elif [ "$base" = "$develop_sha" ]; then
                printf "(based on latest develop)"
            else
                printf "(may be rebased)"
            fi
        else
            printf "%s" "$branch"
        fi
        echo
    done
}

cmd_start() {
    DEFINE_boolean fetch false 'fetch from origin before performing local operation' F
    parse_args "$@"
    BASE=${2:-$MASTER_BRANCH}
    require_name_arg

    # sanity checks
    require_branch_absent "$BRANCH"

    # update the local repo with remote changes, if asked
    if flag fetch; then
        git fetch -q "$ORIGIN" "$MASTER_BRANCH"
    fi

    # if the origin branch counterpart exists, assert that the local branch
    # isn't behind it (to avoid unnecessary rebasing)
    if git_branch_exists "$ORIGIN/$MASTER_BRANCH"; then
        require_branches_equal "$MASTER_BRANCH" "$ORIGIN/$MASTER_BRANCH"
    fi

    # create branch
    if ! git checkout -b "$BRANCH" "$BASE"; then
        error "Could not create feature branch '$BRANCH'"
    fi

    echo
    echo "Summary of actions:"
    echo "- A new branch '$BRANCH' was created, based on '$BASE'"
    echo "- You are now on branch '$BRANCH'"
    echo ""
    echo "Now, start committing on your feature. When done, use:"
    echo ""
    echo "     git drip feature finish $NAME"
    echo
}

cmd_finish() {
    DEFINE_boolean fetch false "fetch from $ORIGIN before performing finish" F
    DEFINE_boolean rebase false "rebase instead of merge" r
    DEFINE_boolean keep false "keep branch after performing finish" k
    DEFINE_boolean squash false "squash feature while performing merge" S
    parse_args "$@"
    expand_nameprefix_arg_or_current

    # sanity checks
    require_branch "$BRANCH"

    # detect if we're restoring from a merge conflict
    if [ -f "$DOT_GIT_DIR/.gitdrip/MERGE_BASE" ]; then
        if git_is_clean_working_tree; then
            FINISH_BASE=$(cat "$DOT_GIT_DIR/.gitdrip/MERGE_BASE")

            # Since the working tree is now clean, either the user did a
            # succesfull merge manually, or the merge was cancelled.
            # We detect this using git_is_branch_merged_into()
            if git_is_branch_merged_into "$BRANCH" "$FINISH_BASE"; then
                rm -f "$DOT_GIT_DIR/.gitdrip/MERGE_BASE"
                helper_finish_cleanup
                exit 0
            else
                # If the user cancelled the merge and decided to wait until later,
                # that's fine. But we have to acknowledge this by removing the
                # MERGE_BASE file and continuing normal execution of the finish
                rm -f "$DOT_GIT_DIR/.gitdrip/MERGE_BASE"
            fi
        else
            echo
            echo "Merge conflicts not resolved yet, use:"
            echo "    git mergetool"
            echo "    git commit"
            echo
            echo "You can then complete the finish by running it again:"
            echo "    git drip feature finish $NAME"
            echo
            exit 1
        fi
    fi

    # sanity checks
    require_clean_working_tree

    # update local repo with remote changes first, if asked
    if has "$ORIGIN/$BRANCH" "$(git_remote_branches)"; then
        if flag fetch; then
            git fetch -q "$ORIGIN" "$BRANCH"
        fi
    fi

    if has "$ORIGIN/$BRANCH" "$(git_remote_branches)"; then
        require_branches_equal "$BRANCH" "$ORIGIN/$BRANCH"
    fi
    if has "$ORIGIN/$MASTER_BRANCH" "$(git_remote_branches)"; then
        require_branches_equal "$MASTER_BRANCH" "$ORIGIN/$MASTER_BRANCH"
    fi

    # if the user wants to merge, do that first
    if flag rebase; then
        if ! git drip feature rebase "$NAME" "$MASTER_BRANCH"; then
            msg "Finish was aborted due to conflicts during rebase."
            msg "Please finish the rebase manually now."
            msg "When finished, re-run:"
            msg "    git drip feature finish '$NAME' '$MASTER_BRANCH'"
            exit 1
        fi
    fi

    # merge into BASE
    git checkout "$MASTER_BRANCH"
    if flag squash; then
        git merge --squash "$BRANCH"
    else
        git merge "$BRANCH"
    fi

    if [ $? -ne 0 ]; then
        # oops.. we have a merge conflict!
        # write the given $MASTER_BRANCH to a temporary file (we need it later)
        mkdir -p "$DOT_GIT_DIR/.gitdrip"
        echo "$MASTER_BRANCH" > "$DOT_GIT_DIR/.gitdrip/MERGE_BASE"
        echo
        echo "There were merge conflicts. To resolve the merge conflict manually, use:"
        echo "    git mergetool"
        echo "    git commit"
        echo
        echo "You can then complete the finish by running it again:"
        echo "    git drip feature finish $NAME"
        echo
        exit 1
    fi

    # when no merge conflict is detected, just clean up the feature branch
    helper_finish_cleanup
}

helper_finish_cleanup() {
    # sanity checks
    require_branch "$BRANCH"
    require_clean_working_tree

    # delete branch
    if flag fetch; then
        git push "$ORIGIN" ":refs/heads/$BRANCH"
    fi


    if noflag keep; then
        git branch -d "$BRANCH"
    fi

    echo
    echo "Summary of actions:"
    echo "- The feature branch '$BRANCH' was merged into '$MASTER_BRANCH'"
    if flag keep; then
        echo "- Feature branch '$BRANCH' is still available"
    else
        echo "- Feature branch '$BRANCH' has been removed"
    fi
    echo "- You are now on branch '$MASTER_BRANCH'"
    echo
}

cmd_checkout() {
    parse_args "$@"

    if [ "$NAME" != "" ]; then
        expand_nameprefix_arg
        git checkout "$BRANCH"
    else
        error "Name a feature branch explicitly."
    fi
}

cmd_co() {
    # Alias for checkout
    cmd_checkout "$@"
}

cmd_diff() {
    parse_args "$@"

    if [ "$NAME" != "" ]; then
        expand_nameprefix_arg
        BASE=$(git merge-base "$MASTER_BRANCH" "$BRANCH")
        git diff "$BASE..$BRANCH"
    else
        if ! git_current_branch | grep -q "^$PREFIX"; then
            error "Not on a feature branch. Name one explicitly."
        fi

        BASE=$(git merge-base "$MASTER_BRANCH" HEAD)
        git diff "$BASE"
    fi
}

cmd_rebase() {
    DEFINE_boolean interactive false 'do an interactive rebase' i
    parse_args "$@"
    expand_nameprefix_arg_or_current
    msg "Will try to rebase '$NAME'..."
    require_clean_working_tree
    require_branch "$BRANCH"

    git checkout -q "$BRANCH"
    local OPTS=
    if flag interactive; then
        OPTS="$OPTS -i"
    fi
    git rebase $OPTS "$MASTER_BRANCH"
}

### Remote branch functions

avoid_accidental_cross_branch_action() {
    local current_branch=$(git_current_branch)
    if [ "$BRANCH" != "$current_branch" ]; then
        msg "Trying to pull from '$BRANCH' while currently on branch '$current_branch'."
        msg "To avoid unintended merges, git-drip aborted."
        return 1
    fi
    return 0
}

cmd_publish() {
    parse_args "$@"
    expand_nameprefix_arg_or_current

    # sanity checks
    require_clean_working_tree
    require_branch "$BRANCH"
    git fetch -q "$ORIGIN"
    require_branch_absent "$ORIGIN/$BRANCH"

    # create remote branch
    git push "$ORIGIN" "$BRANCH:refs/heads/$BRANCH"
    git fetch -q "$ORIGIN"

    # configure remote tracking
    git config "branch.$BRANCH.remote" "$ORIGIN"
    git config "branch.$BRANCH.merge" "refs/heads/$BRANCH"
    git checkout "$BRANCH"

    echo
    echo "Summary of actions:"
    echo "- A new remote branch '$BRANCH' was created"
    echo "- The local branch '$BRANCH' was configured to track the remote branch"
    echo "- You are now on branch '$BRANCH'"
    echo
}

cmd_track() {
    parse_args "$@"
    require_name_arg

    # sanity checks
    require_clean_working_tree
    require_branch_absent "$BRANCH"
    git fetch -q "$ORIGIN"
    require_branch "$ORIGIN/$BRANCH"

    # create tracking branch
    git checkout -b "$BRANCH" "$ORIGIN/$BRANCH"

    echo
    echo "Summary of actions:"
    echo "- A new remote tracking branch '$BRANCH' was created"
    echo "- You are now on branch '$BRANCH'"
    echo
}

cmd_pull() {
    parse_remote_name "$@"

    if [ -z "$REMOTE" ]; then
        error "Name a remote explicitly."
    fi
    name_or_current

    # To avoid accidentally merging different feature branches into each other,
    # die if the current feature branch differs from the requested $NAME
    # argument.
    local current_branch=$(git_current_branch)
    if startswith "$current_branch" "$PREFIX"; then
        # we are on a local feature branch already, so $BRANCH must be equal to
        # the current branch
        avoid_accidental_cross_branch_action || error "aborted"
    fi

    require_clean_working_tree

    if git_branch_exists "$BRANCH"; then
        # Again, avoid accidental merges
        avoid_accidental_cross_branch_action || error "aborted"

        # we already have a local branch called like this, so simply pull the
        # remote changes in
        git pull -q "$REMOTE" "$BRANCH" || error "Failed to pull from remote '$REMOTE'."
        success "Pulled $REMOTE's changes into $BRANCH."
    else
        # setup the local branch clone for the first time
        git fetch -q "$REMOTE" "$BRANCH" || error "Fetch failed."     # stores in FETCH_HEAD
        git branch --no-track "$BRANCH" FETCH_HEAD || error "Branch failed."
        git checkout -q "$BRANCH" || error "Checking out new local branch failed."
        success "Created local branch $BRANCH based on $REMOTE's $BRANCH."
    fi
}
